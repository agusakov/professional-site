{"version":3,"sources":["client.js","Project.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["client","contentful","space","accessToken","Project","props","getCat","getEntry","state","id","then","entry","objArr","console","log","Object","keys","fields","map","subcat","subCatTitle","obj","charAt","toUpperCase","slice","split","join","subCatText","push","setState","subCats","catch","error","onClick","subCat","subCatInd","catId","title","catTitle","slug","catSlug","this","className","to","Component","App","homePage","projects","header","data","src","previewImage","alt","fetchPosts","getEntries","entries","items","forEach","sys","exact","path","render","Home","cat","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.664e0c42.chunk.js","sourcesContent":["import * as contentful from 'contentful'\n\nlet client = contentful.createClient({\n    space: 'h451cppgwa9d',\n    accessToken: '62969ba6d1971f73c52d32b5969440dc4e3a24d50ad9fdbf024f2b09b3f52993' })\n\n\nexport default client;","import React, { Component } from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\nimport client from './client';\n\n\nclass Project extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.catId,\n      title: this.props.catTitle,\n      slug: this.props.catSlug,\n    }\n  }\n\n  componentDidMount() {\n    this.getCat();\n  }\n\n  getCat = () => client.getEntry(`${this.state.id}`)\n      .then((entry) => {\n        var objArr = [];\n        console.log(entry);\n          Object.keys(entry.fields).map(subcat => {\n            var subCatTitle = subcat;\n            if ((subCatTitle !== \"previewImage\") && (subCatTitle !== \"title\")) {\n            var obj = {};\n            obj.subCatTitle = subCatTitle.charAt(0).toUpperCase() + subCatTitle.slice(1).split(/(?=[A-Z]|and)+/).join(\" \");\n            obj.subCatText = entry.fields[subcat];\n\n            objArr.push(obj);\n          }\n        })\n        //console.log(objArr);\n        this.setState({\n          subCats: objArr\n        })})\n      .catch(console.error)\n\n  onClick = (subCat) => {\n    //console.log(subCat);\n    this.setState({subCatInd: subCat});\n  }\n\n  render() {\n    return (\n    <div id=\"wrapper\">\n      <div id=\"main\">\n      <h2 className=\"major\">\n            <span>{this.state.title}</span> \n            <Link to={`/`}>\n              <div className=\"close\" />\n            </Link>\n          </h2>\n      <article id={this.state.title} className=\"active\">\n      <span>{this.state.title}</span> \n        <ul>\n          <li>Generalized Petersen: </li>\n          \n        </ul>\n        </article>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default Project;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Link} from \"react-router-dom\";\nimport Markdown from 'react-markdown';\nimport Project from './Project';\n\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n        \n    }\n    console.log(this.props);\n  }\n  /*onClick = () => {\n    var primary = \"primary\"\n    if (this.state.showOldNews) {\n      primary = \"\";\n    }\n      this.setState({\n        showOldNews: !this.state.showOldNews,\n        clicked: primary\n      })\n  }*/\n\n  render() {\n    return (\n      <div className=\"active\">\n        {console.log(this.props.homePage.fields.projects)}\n        <div id=\"header\">\n          <Markdown>{this.props.homePage.fields.header}</Markdown>\n        </div>\n        <h2>Projects</h2>\n        <nav /*className=\"use-middle\"*/>\n              { this.props.data\n                ? Object.keys(this.props.data).map((obj) =>\n                <div>\n                      {/*console.log(this.props.data[obj].previewImage)*/}\n                      <Link to={`${this.props.data[obj].catSlug}`}>\n                        <img src={`${this.props.data[obj].previewImage}`} alt=\"preview\"/>\n                        <br/>\n                        {this.props.data[obj].catTitle}\n                      </Link>\n                  </div>\n                )\n                : (<h2>Loading...</h2>)\n              }\n          </nav>\n        <div id=\"projects\">\n          <Markdown>{this.props.homePage.fields.projects}</Markdown>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Home from './Home'\nimport Project from './Project'\nimport client from './client'\nimport './App.css';\nimport { Route } from \"react-router-dom\";\n\n/**\n * To do:\n * finish up quantum computing stuff, add more to paper\n * clean up technical writing portfolio, make it look professional\n * figure out styling for headers\n * add CV\n * polish up quantum computing papers and add those\n * add talks given to clubs\n */\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      data: ''\n    }\n  }\n\n componentDidMount() {\n    this.fetchPosts();\n  }\n  \n  fetchPosts = () => client.getEntries().then(entries => {\n    console.log(entries);\n    var objArr = [];\n    entries.items.forEach(entry => {\n      var catTitle = entry.fields.title;\n      if ((catTitle) && (catTitle !== \"Home Page\")) {\n        var obj = {};\n        obj.catTitle = catTitle;\n        obj.catSlug = catTitle.split(\" \").join(\"-\");\n        obj.catId = entry.sys.id;\n        //obj.previewImage = entry.fields.previewImage.fields.file.url;\n        objArr.push(obj);\n      }\n      if (catTitle === \"Home Page\"){\n        this.setState({\n          homePage: entry\n        })\n      }\n    })\n    console.log(objArr[0]);\n    this.setState({\n      data: objArr,\n    })\n   console.log(this.state.data);\n  })\n\n    render () {\n      return (\n        <div className=\"App\">\n          {this.state.data\n          ? \n          <div >\n          <Route /*basename={process.env.PUBLIC_URL}*/ exact path='/' render={() => <Home {...this.state} />}/>\n          {Object.keys(this.state.data).map((cat) =>\n            <Route /*basename={process.env.PUBLIC_URL}*/ path={`/${this.state.data[cat]}`}\n                render={() =>\n                  <div>\n                  {console.log(this.state.data[cat])}\n                  <Project {...this.state.data[cat]} />\n                  </div>\n                }\n              />\n            )}\n          </div>\n          : (<h2>Loading...</h2>)\n          } \n        </div>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter} from \"react-router-dom\";\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}